#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2016-2018 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import datetime
import http
import io
import json
import sys
import urllib.parse
import urllib.request

import html2text

lambda: (yield from 0)  # Python >= 3.3 is required

base_url = 'https://hacker-news.firebaseio.com/v0/'

user_agent = 'hackerlates (https://github.com/jwilk/hackerlates)'

def get_json(url, headers=()):
    url = urllib.parse.urljoin(base_url, url)
    headers = dict(headers)
    headers.update({
        'User-Agent': user_agent,
    })
    request = urllib.request.Request(url, headers=headers)
    ca_options = {}
    if sys.version_info < (3, 4, 3):
        ca_options.update(cadefault=True)
    with urllib.request.urlopen(request, **ca_options) as fp:
        with io.TextIOWrapper(fp, encoding='UTF-8') as tfp:
            return json.load(tfp)

def quoteline(s):
    if s:
        return '> '+ s
    else:
        return '>'

def quotelines(s):
    return '\n'.join(map(quoteline, s.splitlines()))

def dump(user, limit=None):
    if limit is None:
        limit = 1 << 99
    api_url = 'user/{user}.json'.format(user=urllib.parse.quote(user, safe=''))
    user_data = get_json(api_url)
    submitted = user_data['submitted']
    for n in submitted:
        n = int(n)
        api_url = 'item/{0}.json'.format(n)
        post_data = get_json(api_url)
        url = 'https://news.ycombinator.com/item?id={0}'.format(n)
        print(url)
        ts = post_data.get('time')
        if ts is not None:
            ts = datetime.datetime.utcfromtimestamp(ts)
            print(ts)
        if post_data.get('deleted'):
            print('<deleted>')
        title = post_data.get('title')
        if title:
            print(title)
        story_url = post_data.get('url')
        if story_url:
            print(story_url)
        text = post_data.get('text')
        if text:
            text = html2text.html2text(text, bodywidth=999999)
            text = text.rstrip('\n')
            text = quotelines(text)
            print(text)
        print()
        limit -= 1
        if limit <= 0:
            break

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('--debug', action='store_true', help=argparse.SUPPRESS)
    ap.add_argument('--limit', type=int, metavar='N', help=argparse.SUPPRESS)
    ap.add_argument('user', metavar='USER')
    options = ap.parse_args()
    if options.debug:
        http.client.HTTPConnection.debuglevel = 1
    dump(options.user, limit=options.limit)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
