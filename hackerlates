#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2016-2024 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import datetime
import fcntl
import functools
import io
import json
import os
import sys
import urllib.parse
import urllib.request

import html2text

0_0  # Python >= 3.6 is required

if sys.version_info < (3, 11):
    datetime.UTC = datetime.timezone.utc

base_url = 'https://hacker-news.firebaseio.com/v0/'

prog = os.path.basename(sys.argv[0])

def makedirs700(path):
    # TODO: Get rid of this function once
    # https://github.com/python/cpython/issues/86533
    # ("Restore os.makedirs ability to apply mode to all directories created")
    # is fixed.
    if os.path.isdir(path):
        return
    parent = os.path.dirname(path)
    if parent:
        makedirs700(parent)
    try:
        os.mkdir(path, 0o700)
    except OSError:
        if not os.path.isdir(path):
            raise

class Cache():

    @staticmethod
    def _create_cache_dir():
        path = os.getenv('XDG_CACHE_HOME', '')
        if not path.startswith('/'):
            path = os.path.join(os.path.expanduser('~'), '.cache')
        path = os.path.join(path, 'hackerlates')
        makedirs700(path)
        return path

    def __init__(self):
        self.dir = self._create_cache_dir()
        self.path = os.path.join(self.dir, 'cache.json')
        self.data = None
        self.lock_fd = None

    def __enter__(self):
        if self.lock_fd is not None:
            raise RuntimeError(f'{self!r} is already locked')
        self.lock_fd = os.open(self.dir, os.O_RDONLY)
        try:
            fcntl.flock(self.lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except BlockingIOError:
            print(f'{prog}: waiting for the lock...', end='', file=sys.stderr)
            sys.stderr.flush()
            fcntl.flock(self.lock_fd, fcntl.LOCK_EX)
            print('', file=sys.stderr)
        initial_data = {'__version__': 0}
        try:
            with open(self.path, 'rt', encoding='UTF-8') as fp:
                self.data = json.load(fp)
        except FileNotFoundError:
            self.data = {}
        if self.data.get('__version__') != initial_data['__version__']:
            self.data = initial_data
        return self

    def __getitem__(self, key):
        return self.data[key]

    def __setitem__(self, key, value):
        self.data[key] = value

    def __exit__(self, *exc_info):
        if self.lock_fd is None:
            return
        try:
            with open(self.path + '.tmp', 'wt', encoding='UTF-8') as fp:
                json.dump(self.data, fp)
            os.rename(self.path + '.tmp', self.path)
            self.data = None
        finally:
            os.close(self.lock_fd)
            os.lock_fd = None

class UserAgent():

    headers = {
        'User-Agent': 'hackerlates (https://github.com/jwilk/hackerlates)'
    }
    debug_level = 0

    @classmethod
    def _build_opener(cls):
        # TODO: Get rid of this function once
        # <https://github.com/python/cpython/issues/99352> is fixed.
        handlers = [
            Handler(debuglevel=cls.debug_level)
            for Handler in [urllib.request.HTTPHandler, urllib.request.HTTPSHandler]
        ]
        return urllib.request.build_opener(*handlers)

    @classmethod
    def get_json(cls, url, headers=()):
        url = urllib.parse.urljoin(base_url, url)
        headers = dict(headers)
        headers.update(cls.headers)
        request = urllib.request.Request(url, headers=headers)
        opener = cls._build_opener()
        sys.stdout = sys.__stderr__
        try:
            with opener.open(request) as fp:
                with io.TextIOWrapper(fp, encoding='UTF-8') as tfp:
                    return json.load(tfp)
        finally:
            sys.stdout = sys.__stdout__

get_json = UserAgent.get_json

urlquote = functools.partial(urllib.parse.quote, safe='')

def quoteline(s):
    if s:
        return '> '+ s
    return '>'

def quotelines(s):
    return str.join('\n', map(quoteline, s.splitlines()))

def html2md(text):
    cvtr = html2text.HTML2Text()
    cvtr.unicode_snob = True
    cvtr.body_width = 999999
    return cvtr.handle(text)

def fmt_datetime(dt):
    s = str(dt)
    if s[-6:] == '+00:00':
        # unknown local offset convention
        # https://www.rfc-editor.org/rfc/rfc3339.html#section-4.3
        s = f'{s[:-6]}-00:00'
    return s

def dump(user, *, cache, limit=None):
    if limit is None:
        limit = 1 << 99
    api_url = f'user/{urlquote(user)}.json'
    user_data = get_json(api_url)
    submitted = user_data['submitted']
    now = datetime.datetime.now(tz=datetime.UTC)
    for n in submitted:
        n = int(n)
        api_url = f'item/{n}.json'
        try:
            post_data = cache[api_url]
        except KeyError:
            post_data = get_json(api_url)
        url = f'https://news.ycombinator.com/item?id={n}'
        print(url)
        ts = post_data.get('time')
        if ts is not None:
            ts = datetime.datetime.fromtimestamp(ts, tz=datetime.UTC)
            print(fmt_datetime(ts))
            if now - ts > datetime.timedelta(seconds=(2 * 60 * 60)):  # 2 hours
                cache[api_url] = post_data
        if post_data.get('deleted'):
            print('<deleted>')
        title = post_data.get('title')
        if title:
            print(title)
        story_url = post_data.get('url')
        if story_url:
            print(story_url)
        text = post_data.get('text')
        if text:
            text = html2md(text)
            text = text.rstrip('\n')
            text = quotelines(text)
            print(text)
        print()
        limit -= 1
        if limit <= 0:
            break

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('--debug', action='store_true', help=argparse.SUPPRESS)
    ap.add_argument('--limit', type=int, metavar='N', help=argparse.SUPPRESS)
    ap.add_argument('user', metavar='USER')
    options = ap.parse_args()
    if options.debug:
        UserAgent.debug_level = 1
    with Cache() as cache:
        dump(options.user, limit=options.limit, cache=cache)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
